// Workshop 4 - Prefix Scan - SIMD Scan
// scan.h
// June 23, 2021 - Hung Truong - 147779193: Added OMP simd reduction and omp scan

#include <omp.h>

template <typename T>
int incl_scan(
    const T* in,                // source data
    T* out,                     // output data
    int size,                   // size of data sets
    T initial                   // initial value
) {
    #pragma omp simd reduction(inscan, +:initial)
    for (int i = 0; i < size; i++) {
        initial += in[i];
        #pragma omp scan inclusive(initial)
        out[i] = initial;
    }
    return 1; // 1 thread
}

template <typename T>
int excl_scan(
    const T* in,                // source data
    T* out,                     // output data
    int size,                   // size of data sets
    T initial                   // initial value
) {

    if (size > 0) {
#pragma omp simd reduction(inscan, +:initial)
        for (int i = 0; i < size - 1; i++) {
            out[i] = initial;
            #pragma omp scan exclusive(initial)
            initial += in[i];
        }
        out[size - 1] = initial;
    }
    return 1; // 1 thread
}

template <typename T, typename S>
int scan(
    const T* in,   // source data
    T* out,        // output data
    int size,      // size of source, output data sets
    S scan_fn,     // scan function (exclusive or inclusive) 
    T initial      // initial value
)
{
    return scan_fn(in, out, size, T(0));
}

///////////////////////////////////////////////////////////////////////////////

// Workshop 4 - Prefix Scan - SPMD Three-Stage Tiled
// scan.h
// June 23, 2021 - Hung Truong: Added OMP barrier and single

#include <omp.h>

template <typename T, typename C>
void incl_scan(
	const T* in, // source data
	T* out,      // output data
	int size,    // size of source, output data sets
	C combine,   // combine expression
	T initial    // initial value
)
{
	for (int i = 0; i < size; i++) {
		initial = combine(initial, in[i]);
		out[i] = initial;
	}
}

template <typename T, typename C>
void excl_scan(
	const T* in, // source data
	T* out,      // output data
	int size,    // size of source, output data sets
	C combine,   // combine expression
	T initial    // initial value
)
{
	if (size > 0) {
		for (int i = 0; i < size - 1; i++) {
			out[i] = initial;
			initial = combine(initial, in[i]);
		}
		out[size - 1] = initial;
	}
}

template <typename T, typename C>
T reduce(
	const T* in, // points to the data set
	int n,       // number of elements in the data set
	C combine,   // combine operation
	T initial    // initial value
) {

	for (int i = 0; i < n; i++)
		initial = combine(initial, in[i]);
	return initial;
}

template <typename T, typename R, typename C, typename S>
int scan(
	const T* in,   // source data
	T* out,        // output data
	int size,      // size of source, output data sets
	R reduce,      // reduction expression
	C combine,     // combine expression
	S scan_fn,     // scan function (exclusive or inclusive)
	T initial      // initial value
)
{
	int mtiles = 1;
	if (size > 0) {
		// requested number of tiles
		mtiles = omp_get_max_threads();
		T* reduced = new T[mtiles];
		T* scanRes = new T[mtiles];
		omp_set_num_threads(mtiles);

		#pragma omp parallel
		{
			int itile = omp_get_thread_num();
			int itiles = omp_get_thread_num();
			int ntiles = omp_get_num_threads();
			if (itile == 0) {
				mtiles = ntiles;
			}

			int last_tile = ntiles - 1;
			int tile_size = (size - 1) / ntiles + 1;
			int last_tile_size = size - last_tile * tile_size;

			// step 1 - reduce each tile separately
			reduced[itile] = reduce(in + itile * tile_size,
				itile == last_tile ? last_tile_size : tile_size, combine, T(0));
			#pragma omp barrier
			// step 2 - perform exclusive scan on all tiles using reduction outputs 
			// store results in scanRes[]
			#pragma omp single
			excl_scan(reduced, scanRes, mtiles, combine, T(0));

			// step 3 - scan each tile separately using scanRes[]
			scan_fn(in + itile * tile_size, out + itile * tile_size,
				itile == last_tile ? last_tile_size : tile_size, combine,
				scanRes[itile]);
		}

		delete[] reduced;
		delete[] scanRes;
	}
	return mtiles;
}


///////////////////////////////////////////////////////////////////////////////

// Workshop 4 - Prefix Scan - Worksharing Three-Stage Tiled
// scan.h
// June 23, 2021 - Hung Truong: Added OMP for and single

#include <omp.h>

template <typename T, typename C>
void incl_scan(
	const T* in, // source data
	T* out,      // output data
	int size,    // size of source, output data sets
	C combine,   // combine expression
	T initial    // initial value
)
{
	for (int i = 0; i < size; i++) {
		initial = combine(initial, in[i]);
		out[i] = initial;
	}
}

template <typename T, typename C>
void excl_scan(
	const T* in, // source data
	T* out,      // output data
	int size,    // size of source, output data sets
	C combine,   // combine expression
	T initial    // initial value
)
{
	if (size > 0) {
		for (int i = 0; i < size - 1; i++) {
			out[i] = initial;
			initial = combine(initial, in[i]);
		}
		out[size - 1] = initial;
	}
}

template <typename T, typename C>
T reduce(
	const T* in, // points to the data set
	int n,       // number of elements in the data set
	C combine,   // combine operation
	T initial    // initial value
) {

	for (int i = 0; i < n; i++)
		initial = combine(initial, in[i]);
	return initial;
}

template <typename T, typename R, typename C, typename S>
int scan(
	const T* in,   // source data
	T* out,        // output data
	int size,      // size of source, output data sets
	R reduce,      // reduction expression
	C combine,     // combine expression
	S scan_fn,     // scan function (exclusive or inclusive)
	T initial      // initial value
)
{
	int mtiles = 1;
	if (size > 0) {
		// requested number of tiles
		mtiles = omp_get_max_threads();
		T* reduced = new T[mtiles];
		T* scanRes = new T[mtiles];
		omp_set_num_threads(mtiles);

#pragma omp parallel
		{
			int itiles = omp_get_thread_num();
			int ntiles = omp_get_num_threads();
			if (itiles == 0) {
				mtiles = ntiles;
			}

			int last_tile = ntiles - 1;
			int tile_size = (size - 1) / ntiles + 1;
			int last_tile_size = size - last_tile * tile_size;

			// step 1 - reduce each tile separately
#pragma omp for
			for (int itile = 0; itile < mtiles; itile++)
				reduced[itile] = reduce(in + itile * tile_size,
					itile == last_tile ? last_tile_size : tile_size, combine, T(0));

			// step 2 - perform exclusive scan on all tiles using reduction outputs 
			// store results in scanRes[]
#pragma omp single
			excl_scan(reduced, scanRes, mtiles, combine, T(0));

			// step 3 - scan each tile separately using scanRes[]
#pragma omp for
			for (int itile = 0; itile < mtiles; itile++)
				scan_fn(in + itile * tile_size, out + itile * tile_size,
					itile == last_tile ? last_tile_size : tile_size, combine,
					scanRes[itile]);
		}

		delete[] reduced;
		delete[] scanRes;
	}
	return mtiles;
}


///////////////////////////////////////////////////////////////////////////////

// Workshop 4 - Prefix Scan - Worksharing SIMD Three-Stage Tiled
// scan.h
// June 23, 2021 - Hung Truong: Added OMP for, single, simd
//                              reduction and scan

#include <omp.h>

template <typename T, typename C>
void incl_scan(
	const T* in, // source data
	T* out,      // output data
	int size,    // size of source, output data sets
	C combine,   // combine expression
	T initial    // initial value
)
{
#pragma omp simd reduction(inscan, +:initial)
	for (int i = 0; i < size; i++) {
		initial = combine(initial, in[i]);
#pragma omp scan inclusive(initial)
		out[i] = initial;
	}
}

template <typename T, typename C>
void excl_scan(
	const T* in, // source data
	T* out,      // output data
	int size,    // size of source, output data sets
	C combine,   // combine expression
	T initial    // initial value
)
{
	if (size > 0) {
#pragma omp simd reduction(inscan, +:initial)
		for (int i = 0; i < size - 1; i++) {
			out[i] = initial;
#pragma omp scan exclusive(initial)
			initial = combine(initial, in[i]);
		}
		out[size - 1] = initial;
	}
}

template <typename T, typename C>
T reduce(
	const T* in, // points to the data set
	int n,       // number of elements in the data set
	C combine,   // combine operation
	T initial    // initial value
) {
	for (int i = 0; i < n; i++)
		initial = combine(initial, in[i]);
	return initial;
}

template <typename T, typename R, typename C, typename S>
int scan(
	const T* in,   // source data
	T* out,        // output data
	int size,      // size of source, output data sets
	R reduce,      // reduction expression
	C combine,     // combine expression
	S scan_fn,     // scan function (exclusive or inclusive)
	T initial      // initial value
)
{
	int mtiles = 1;
	if (size > 0) {
		// requested number of tiles
		mtiles = omp_get_max_threads();
		T* reduced = new T[mtiles];
		T* scanRes = new T[mtiles];
		omp_set_num_threads(mtiles);

#pragma omp parallel
		{
			int itiles = omp_get_thread_num();
			int ntiles = omp_get_num_threads();
			if (itiles == 0) {
				mtiles = ntiles;
			}

			int last_tile = ntiles - 1;
			int tile_size = (size - 1) / ntiles + 1;
			int last_tile_size = size - last_tile * tile_size;

			// step 1 - reduce each tile separately
#pragma omp for
			for (int itile = 0; itile < mtiles; itile++)
				reduced[itile] = reduce(in + itile * tile_size,
					itile == last_tile ? last_tile_size : tile_size, combine, T(0));

			// step 2 - perform exclusive scan on all tiles using reduction outputs 
			// store results in scanRes[]
#pragma omp single
			excl_scan(reduced, scanRes, mtiles, combine, T(0));

			// step 3 - scan each tile separately using scanRes[]
#pragma omp for
			for (int itile = 0; itile < mtiles; itile++)
				scan_fn(in + itile * tile_size, out + itile * tile_size,
					itile == last_tile ? last_tile_size : tile_size, combine,
					scanRes[itile]);
		}

		delete[] reduced;
		delete[] scanRes;
	}
	return mtiles;
}


///////////////////////////////////////////////////////////////////////////////

// Workshop 4 - Prefix Scan - Serial
// scan.cpp
// 2020.10.12
// Chris Szalwinski

#include <iostream>
#include <chrono>
#include "scan.h"

// report system time
//
void reportTime(const char* msg, std::chrono::steady_clock::duration span) {
	auto ms = std::chrono::duration_cast<std::chrono::microseconds>(span);
	std::cout << msg << " - took - " <<
		ms.count() << " microseconds" << std::endl;
}

int main(int argc, char** argv) {
	if (argc > 2) {
		std::cerr << argv[0] << ": invalid number of arguments\n";
		std::cerr << "Usage: " << argv[0] << "\n";
		std::cerr << "Usage: " << argv[0] << "  power_of_2\n";
		return 1;
	}
	std::cout << "Serial Prefix Scan" << std::endl;

	// initial values for testing
	const int N = 9;
	const int in_[N]{ 3, 1, 7, 0, 1, 4, 5, 9, 2 };

	// command line arguments - none for testing, 1 for large arrays
	int n, nt{ 1 };
	if (argc == 1) {
		n = N;
	}
	else {
		n = 1 << std::atoi(argv[1]);
		if (n < N) n = N;
	}
	int* in = new int[n];
	int* out = new int[n];

	// initialize
	for (int i = 0; i < N; i++)
		in[i] = in_[i];
	for (int i = N; i < n; i++)
		in[i] = 1;
	auto add = [](int a, int b) { return a + b; };

	std::chrono::steady_clock::time_point ts, te;

	// Inclusive Prefix Scan - Remove Startup Cost
	scan(in, out, n, add, incl_scan<int, decltype(add)>, (int)0);

	// Inclusive Prefix Scan
	ts = std::chrono::steady_clock::now();
	nt = scan(in, out, n, add, incl_scan<int, decltype(add)>, (int)0);
	te = std::chrono::steady_clock::now();

	std::cout << nt << " thread" << (nt > 1 ? "s" : "") << std::endl;
	for (int i = 0; i < N; i++)
		std::cout << out[i] << ' ';
	std::cout << out[n - 1] << std::endl;
	reportTime("Inclusive Scan", te - ts);

	// Exclusive Prefix Scan
	ts = std::chrono::steady_clock::now();
	nt = scan(in, out, n, add, excl_scan<int, decltype(add)>, (int)0);
	te = std::chrono::steady_clock::now();

	std::cout << nt << " thread" << (nt > 1 ? "s" : "") << std::endl;
	for (int i = 0; i < N; i++)
		std::cout << out[i] << ' ';
	std::cout << out[n - 1] << std::endl;
	reportTime("Exclusive Scan", te - ts);

	// Exclusive Prefix Scan
	ts = std::chrono::steady_clock::now();
	nt = scan(in, out, n, add, incl_scan<int, decltype(add)>, (int)0);
	te = std::chrono::steady_clock::now();

	std::cout << nt << " thread" << (nt > 1 ? "s" : "") << std::endl;
	std::cout << 0 << ' ';
	for (int i = 0; i < N - 1; i++)
		std::cout << out[i] << ' ';
	std::cout << out[n - 2] << std::endl;
	reportTime("Exclusive Scan", te - ts);

	delete[] in;
	delete[] out;
}